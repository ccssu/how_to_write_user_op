{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>ninja of_format\n</code></pre>"},{"location":"utils/","title":"\u524d\u8a00","text":""},{"location":"utils/#_1","title":"\u5f15\u8a00","text":""},{"location":"utils/#_2","title":"\u5de5\u5177\u7bc7","text":"\u5f00\u53d1\u5de5\u5177 \u7b80\u4ecb Visual Studio Code Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002 VS Code \u63d2\u4ef6::clangd \u5206\u6790 C++ \u6587\u4ef6\uff0c\u5b9e\u73b0 C++\u4ee3\u7801\u8df3\u8f6c VS Code \u63d2\u4ef6::Python VS Code \u63d2\u4ef6 \u7528\u4e8e\u5206\u6790 Python \u6587\u4ef6\uff0c\u4e3b\u8981\u6709 \u4ee3\u7801\u8df3\u8f6c\uff0c\u53d8\u91cf\u7c7b\u578b\u5206\u6790\u7b49\u3002 VS Code \u63d2\u4ef6::Live Server \u542f\u52a8\u5e26\u6709\u5b9e\u65f6\u91cd\u8f7d\u529f\u80fd\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\uff0c\u7528\u4e8e\u9759\u6001\u548c\u52a8\u6001\u9875\u9762\u3002\u5b9e\u73b0 \u5728\u7ebf\u9884\u89c8 oneflow\u5f00\u53d1\u8fc7\u7a0b\u4e2d html \u6587\u6863\u3002 Debug\u5de5\u5177::pdb  pdb  \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6e90\u4ee3\u7801\u8c03\u8bd5\u5668\uff0c\u7528\u4e8ePython \u7a0b\u5e8f Debug\u5de5\u5177::GDB  GDB: \u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002 \u6027\u80fd\u5de5\u5177::nsys NVIDIA\u6027\u80fd\u5206\u6790\u5de5\u5177Nsight Systems/Compute \u7684\u4f7f\u7528\u4ecb\u7ecd"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/","title":"OneFlow CUDA Elementwise","text":"<ul> <li>[ ] OneFlow CUDA Elementwise</li> </ul>"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_1","title":"\u5f15\u8a00","text":"<p>\u9010\u5143\u7d20\u64cd\u4f5c\uff08\u4e5f\u53eb Elementwise \u64cd\u4f5c\uff09\u662f\u6307\u5bf9 Tensor \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u53d8\u6362\uff0c\u5f97\u5230\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u3002</p> <p>\u5728\u6df1\u5ea6\u5b66\u4e60\u91cc\uff0c\u6709\u5f88\u591a\u7b97\u5b50\u5c5e\u4e8e Elementwise \u7b97\u5b50\u8303\u7574\uff0c\u6bd4\u5982\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff08\u5982ReLU\u3001GELU \uff09\uff0cScalarMultiply\uff08\u5bf9 Tensor \u6bcf\u4e2a\u5143\u7d20\u90fd\u4e58\u4e0a\u4e00\u4e2a\u6807\u91cf\uff09\u7b49\u64cd\u4f5c\u3002</p>"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_2","title":"\u4f7f\u7528","text":"<p>\u4e3a\u6b64 OneFlow \u9488\u5bf9\u8fd9\u79cd Elementwise \u64cd\u4f5c\u62bd\u8c61\u51fa\u4e00\u5957 CUDA \u6a21\u677f\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u628a\u8ba1\u7b97\u903b\u8f91\u5c01\u88c5\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u5185\uff0c\u5373\u53ef\u83b7\u5f97\u4e00\u4e2a CUDA Elementwise \u7b97\u5b50\uff0c\u4ee5 ReLU \u4e3a\u4f8b\uff1a  ReLU\u6fc0\u6d3b\u51fd\u6570\u8be6\u7ec6\u4ecb\u7ecd</p> <pre><code>// \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97ReLU\uff08rectified linear unit\uff09\u51fd\u6570\u7684functor\u3002\n// \u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u7ed3\u6784\u4f53\uff0c\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570T\uff0c\u8868\u793a\u8f93\u5165\u548c\u8f93\u51fa\u7684\u6570\u636e\u7c7b\u578b\u3002\n// Write ReLU Functor. \ntemplate&lt;typename T&gt;\nstruct ReluFunctor {\nOF_DEVICE_FUNC T operator()(T x) const {\nconst T zero_val = static_cast&lt;T&gt;(0); return (x &gt; zero_val) ? x : zero_val; }\n};\n// \u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86ReLU\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u9996\u5148\uff0c\u58f0\u660e\u4e00\u4e2a\u5e38\u91cfzero_val\uff0c\u8868\u793a\u96f6\u503c\uff0c\u5176\u7c7b\u578b\u4e3aT\u3002\n// \u7531\u4e8eT\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u4f7f\u7528static_cast\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\n// \u7136\u540e\uff0c\u6839\u636eReLU\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u8f93\u5165x\u5927\u4e8e\u96f6\uff0c\u5219\u8f93\u51fa\u4e3ax\uff0c\u5426\u5219\u8f93\u51fa\u4e3a0\u3002\n// \u8fd9\u4e2a\u5224\u65ad\u901a\u8fc7\u4e09\u76ee\u8fd0\u7b97\u7b26\u5b9e\u73b0\uff0c\u5982\u679cx\u5927\u4e8ezero_val\uff0c\u5219\u8fd4\u56dex\uff0c\u5426\u5219\u8fd4\u56dezero_val\uff08\u53730\uff09\u3002\n// \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cOF_DEVICE_FUNC\u662f\u4e00\u4e2aOpenFusion\u7684\u5b8f\u5b9a\u4e49\uff0c\u7528\u4e8e\u6307\u5b9a\u8fd9\u4e2afunctor\u53ef\u4ee5\u5728\u8bbe\u5907\u4e0a\u8fd0\u884c\uff08\u5373\u5728CUDA\u8bbe\u5907\u4e0a\u8fd0\u884c\uff09\u3002\n</code></pre> <pre><code>// Use CUDA Elementwise Template. \nOF_CUDA_CHECK((cuda::elementwise::Unary(ReluFunctor&lt;T&gt;(), elem_cnt, dx-&gt;mut_dptr&lt;T&gt;(),\nx-&gt;dptr&lt;T&gt;(), ctx-&gt;stream()-&gt;As&lt;ep::CudaStream&gt;()-&gt;cuda_stream())));\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528CUDA Elementwise\u6a21\u677f\uff0c\u5b83\u53ef\u4ee5\u5728GPU\u4e0a\u6267\u884c\u5355\u5143\u64cd\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u52a0\u901f\u3002 - ReluFunctor() \u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u7528\u4e8e\u5bf9\u8f93\u5165\u6570\u636e\u6267\u884c relu \u64cd\u4f5c\uff0c\u5b83\u5c06\u88ab\u5e94\u7528\u4e8e x-&gt;dptr() \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 - elem_cnt \u662f\u5143\u7d20\u7684\u6570\u91cf\u3002 - dx-&gt;mut_dptr() \u662f\u4e00\u4e2a\u53ef\u53d8\u6307\u9488\uff0c\u6307\u5411\u8981\u4fee\u6539\u7684\u8f93\u51fa\u6570\u636e\uff08\u5373 relu \u64cd\u4f5c\u540e\u7684\u7ed3\u679c\uff09\u3002 - x-&gt;dptr() \u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u6307\u5411\u8f93\u5165\u6570\u636e\u3002 - ctx-&gt;stream()-&gt;As()-&gt;cuda_stream() \u662f\u4e00\u4e2a CUDA \u6d41\uff0c\u7528\u4e8e\u5728 GPU \u4e0a\u6267\u884c\u64cd\u4f5c\u3002 - OF_CUDA_CHECK \u5b8f\u7528\u4e8e\u68c0\u67e5 CUDA \u64cd\u4f5c\u662f\u5426\u6210\u529f\u6267\u884c\uff0c\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002"},{"location":"OneFlow/OneFlow_CUDA_Elementwise/#_3","title":"\u539f\u7406\u4ecb\u7ecd","text":"<p>\u9ad8\u6548\u3001\u6613\u7528\u3001\u53ef\u62d3\u5c55\u6211\u5168\u90fd\u8981\uff1aOneFlow CUDA Elementwise \u6a21\u677f\u5e93\u7684\u8bbe\u8ba1\u4f18\u5316\u601d\u8def</p>"},{"location":"OneFlow/backward/","title":"\u53cd\u5411\u4f20\u64ad\u5b9e\u73b0\u793a\u4f8b","text":""},{"location":"OneFlow/backward/#_1","title":"\u53cd\u5411\u4f20\u64ad","text":""},{"location":"OneFlow/backward/#_2","title":"\u5f15\u8a00","text":"<p>\u5b8c\u6210\u4e0b\u9762\u94fe\u63a5\u9605\u8bfb\uff0c\u5927\u81f4\u53ef\u4ee5\u4e86\u89e3\u53cd\u5411\u4f20\u64ad\u3002</p> <ul> <li>[x] BP \u7b97\u6cd5\u4ecb\u7ecd</li> <li>x #02 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5](https://www.bilibili.com/video/BV1yG411x7Cc/?spm_id_from=333.788&amp;vd_source=0a13fe290c31c25fa9f746838c074df4)</li> <li>x(https://www.bilibili.com/video/BV1bW4y1j77v/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=0a13fe290c31c25fa9f746838c074df4)</li> <li>x(https://zhuanlan.zhihu.com/p/587951710) </li> </ul>"},{"location":"OneFlow/backward/#python","title":"\u7ed3\u5408\u4e00\u4e2aPython\u793a\u4f8b\u7814\u7a76 \u7b97\u5b50\u53cd\u5411\u4f20\u64ad\u7684\u5b9e\u73b0","text":"<p>\u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528PyTorch\u5b9e\u73b0exp2\u7b97\u5b50</p> <p>$y_i = 2^{x_i}$</p> <p>y\u5bf9x\u6c42\u5bfc $y_i^, = 2^{x_i} * ln(2)$ </p> <p>\uff08\u5373\u5bf9\u8f93\u5165\u5f20\u91cf\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c2\u7684\u6307\u6570\u5e42\u8fd0\u7b97\uff09\uff0c\u4e0b\u9762\u662f\u4e24\u4e2a\u4e00\u4e2a\u7b80\u5355\u7684\u53cd\u5411\u4f20\u64ad\u793a\u4f8b\uff1a</p>"},{"location":"OneFlow/backward/#1","title":"\u793a\u4f8b 1","text":"<pre><code>import torch\n# \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf\nx = torch.tensor([1.0, 2.0, 3.0], requires_grad=True)\n# \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad\nexp2 = torch.exp2\ny = exp2(x)\n# \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c\ny.backward(torch.ones_like(x))\nprint(x.grad)\n</code></pre>  output <pre><code>tensor([1.3863, 2.7726, 5.5452], dtype=oneflow.float32)\n</code></pre>"},{"location":"OneFlow/backward/#2","title":"\u793a\u4f8b 2","text":"<pre><code>import oneflow as torch\nimport math \nclass Exp2Function(torch.autograd.Function):\n@staticmethod\ndef forward(ctx, input):\nresult = torch.pow(2, input)\nctx.save_for_backward(result)\nreturn result\n@staticmethod\ndef backward(ctx, grad_output):\nresult, = ctx.saved_tensors\nreturn grad_output * math.log(2) * result\nclass Exp2(torch.nn.Module):\ndef forward(self, input):\nreturn Exp2Function.apply(input)\n# \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf\nx = torch.tensor([1.0, 2.0, 3.0], requires_grad=True)\n# \u521b\u5efaexp2\u7b97\u5b50\u5e76\u8ba1\u7b97\u524d\u5411\u4f20\u64ad\nexp2 = Exp2()\ny = exp2(x)\n# \u8ba1\u7b97\u68af\u5ea6\u5e76\u6253\u5370\u7ed3\u679c\ny.backward(torch.ones_like(x))\nprint(x.grad)\n</code></pre>  output <pre><code>tensor([1.3863, 2.7726, 5.5452], dtype=oneflow.float32)\n</code></pre>"},{"location":"OneFlow/backward/#oneflow-exp2","title":"oneflow \u4e2d exp2\u53cd\u5411\u5b9e\u73b0\u903b\u8f91","text":"<p>https://github.com/youxiudeshouyeren/oneflow/blob/d1dc691308bf12fda90a48687e1693472b57eef2/oneflow/core/ep/common/primitive/binary_functor.h#L565-L571</p> <p><pre><code>template&lt;DeviceType device, typename Src, typename Dst&gt;\nstruct BinaryFunctor&lt;device, BinaryOp::kExp2BackwardWithDyX, Src, Dst&gt; {\nOF_DEVICE_FUNC BinaryFunctor(Scalar attr0, Scalar attr1) {}\nOF_DEVICE_FUNC Dst operator()(Src dy, Src x) const {\nreturn dy * exp2(x) * log(static_cast&lt;Src&gt;(2.0));\n}\n};\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u5bf9\u8c61 BinaryFunctor\uff0c\u7528\u4e8e\u8ba1\u7b97 exp2 \u51fd\u6570\u7684\u53cd\u5411\u4f20\u64ad\u65f6\u5bf9\u8f93\u5165 dy \u548c x \u7684\u5bfc\u6570\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\u5b9e\u73b0\u4e86 BinaryOp::kExp2BackwardWithDyX \u64cd\u4f5c\uff0c\u5373\u5bf9\u4e8e\u8f93\u5165\u7684 dy \u548c x\uff0c\u8ba1\u7b97 exp2(x) \u7684\u5bfc\u6570\u4e58\u4ee5 dy\uff0c\u5373 dy * exp2(x) * log(2)\u3002\u5176\u4e2d\uff0clog(2) \u662f\u4ee5 2 \u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u7531\u4e8e log \u51fd\u6570\u5e76\u6ca1\u6709\u5728 C++ \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4ee5 2 \u4e3a\u5e95\u7684\u7248\u672c\uff0c\u6240\u4ee5\u4f7f\u7528 static_cast&lt;&gt;() \u51fd\u6570\u5c06\u5e38\u6570 2.0 \u8f6c\u6362\u4e3a\u6a21\u677f\u53c2\u6570 Src \u7c7b\u578b\uff0c\u7136\u540e\u518d\u8c03\u7528\u6807\u51c6\u5e93\u4e2d\u7684 log \u51fd\u6570\u3002</p>"},{"location":"OneFlow/document/","title":"Document","text":"<p>  \u4e00 . how_to_write_api_docs  <p>  \u4e8c . \u5982\u4f55\u5b9e\u73b0api_docs\u6587\u6863\u9884\u89c8"},{"location":"OneFlow/forward/","title":"\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50","text":"<p>\u672c\u6587\u6765\u6e90\uff1a https://github.com/Oneflow-Inc/OneTeam/blob/master/tutorial/howto_add_user_op.md</p> <p>\u672c\u6587\u5c06\u4ee5\u5f00\u53d1\u4e00\u4e2a leaky_relu\uff08\u51c6\u786e\u8bf4\u662f leaky_relu_yzh op\uff0c\u56e0\u4e3a master \u5206\u652f\u7684 leaky_relu \u7ec4\u5408\u4e86\u5176\u5b83\u77e5\u8bc6\u70b9\uff0c\u4e0d\u9002\u5408\u4f5c\u4e3a\u6559\u7a0b\u5c55\u793a\uff09\u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u65b0\u589e\u7b97\u5b50\u3002</p> <p>\u672c\u6587\u5bf9\u5e94\u7684 PR \u5728 https://github.com/Oneflow-Inc/oneflow/pull/8350</p>"},{"location":"OneFlow/forward/#_1","title":"\u80cc\u666f","text":""},{"location":"OneFlow/forward/#op-kernel","title":"op \u4e0e kernel","text":"<p>\u5728\u4e0a\u6587\u63d0\u5230 \u201c\u5b9a\u4e49 op\u201d \u4e0e \u201c\u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91\u201d \u4e24\u4e2a\u6b65\u9aa4\uff0c\u8fd9\u91cc\u7684 op \u4e0e kernel \u662f\u4e24\u4e2a\u6709\u5173\u8054\u7684\u6982\u5ff5\u3002</p> <p>op \u662f\u903b\u8f91\u4e0a\u7684\u7b97\u5b50\uff0c\u5305\u542b OneFlow Compiling Runtime \u5728\u6784\u5efa\u8ba1\u7b97\u56fe\u65f6\u6240\u9700\u8981\u7684\u5fc5\u8981\u4fe1\u606f\uff0c\u5982\u8f93\u5165\u3001\u8f93\u51fa\u5f62\u72b6\uff0c\u54ea\u4e9b\u5f20\u91cf\u9700\u8981\u81ea\u52a8\u6c42\u5bfc\u7b49\u4fe1\u606f\u3002 \u6709\u4e86 op \u4e2d\u7684\u4fe1\u606f\uff0cOneFlow Compiling Runtime \u5c31\u53ef\u4ee5\u6784\u5efa\u8ba1\u7b97\u56fe\u5e76\u4f9d\u636e\u8ba1\u7b97\u56fe\u505a\u8d44\u6e90\u7533\u8bf7\u3001\u6784\u5efa\u7b49\u64cd\u4f5c\uff08\u5982\u6839\u636e\u5f20\u91cf\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u7533\u8bf7\u5185\u5b58\uff09\uff0c \u4f46\u662f op \u4e2d\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002</p> <p>\u5728\u771f\u6b63\u9700\u8981\u5904\u7406\u6570\u636e\u65f6\uff0cOneFlow Executing Runtime \u4f1a\u542f\u52a8 kernel \u5b8c\u6210\u8ba1\u7b97\uff0c\u6240\u4ee5 kernel \u4e2d\u5305\u542b\u4e86\u5177\u4f53\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 op\uff0cOneFlow Executing Runtime \u4f1a\u6839\u636e\u6570\u636e\u7c7b\u578b\u3001\u786c\u4ef6\u8bbe\u5907\uff08\u6bd4\u5982\u662f CPU \u8fd8\u662f CUDA\uff09\u7684\u5177\u4f53\u60c5\u51b5\uff0c\u9009\u62e9\u542f\u52a8\u4e0d\u540c\u7684 kernel\u3002</p>"},{"location":"OneFlow/forward/#oneflow-op-user-op","title":"OneFlow \u4e2d\u7684\u7cfb\u7edf op \u4e0e user op","text":"<p>\u5728 OneFlow \u7cfb\u7edf\u4e2d\u5b58\u5728\u4e24\u7c7b\u7b97\u5b50\uff08op\uff09\uff1a\u7cfb\u7edf op \u548c user op\u3002</p> <p>\u7cfb\u7edf op \u5b9a\u4e49\u5728\uff1aoneflow/core/operator/ \u76ee\u5f55\uff0c \u5bf9\u5e94\u7684 kernel \u5b9e\u73b0\u5728\uff1aoneflow/core/kernel \u76ee\u5f55\u3002 \u7cfb\u7edf op \u662f\u5bf9\u6784\u56fe\u3001\u6d41\u6c34\u7b49\u7cfb\u7edf\u6027\u80fd\u8f83\u4e3a\u5173\u952e\u7684\u4e00\u4e9b op\u3002</p> <p>\u9664\u6781\u5c11\u6570 op \u5c5e\u4e8e\u7cfb\u7edf op \u5916\uff0c\u5927\u591a\u6570 op \u90fd\u662f user op\uff0c\u8fd9\u4e9b user op \u548c\u7528\u6237\u6a21\u578b\u4e1a\u52a1\u903b\u8f91\u76f8\u5173\u3002 OneFlow user op \u7684\u5b9a\u4e49\u53ca kernel \u5b9e\u73b0\u5206\u522b\u5728 oneflow/user/ops \u548c oneflow/user/kernels \u76ee\u5f55\u4e0b\u3002</p> <p>\u76ee\u524d OneFlow \u5df2\u5b9e\u73b0\u4e86\u4e30\u5bcc\u7684\u7b97\u5b50\u5e93\uff0c\u4f46\u662f\u5f53\u5df2\u6709\u7684\u7b97\u5b50\u5e93\u65e0\u6cd5\u6ee1\u8db3\u642d\u5efa\u6a21\u578b\u7684\u9700\u6c42\u65f6\uff0c\u5c31\u9700\u8981\u65b0\u589e\u7b97\u5b50\u3002 \u672c\u6587\u4ecb\u7ecd\u7684\u65b0\u589e\u7b97\u5b50\u6307\u7684\u662f \u65b0\u589e user op\u3002</p>"},{"location":"OneFlow/forward/#ods-tablegen","title":"ODS \u4e0e TableGen","text":"<p>TableGen \u662f\u4e00\u4e2a\u4ee3\u7801\u751f\u6210\u5de5\u5177\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u5b83\u8bfb\u53d6\u5e76\u89e3\u6790\u4e00\u4e2a <code>.td</code> \u683c\u5f0f\uff08\u8bed\u6cd5\u63a5\u8fd1 C++ \u6a21\u677f\uff09\u7684\u6587\u4ef6\uff0c\u7136\u540e\u4ea4\u7ed9 TableGen \u540e\u7aef \u751f\u6210\u53e6\u5916\u683c\u5f0f\u7684\u8bed\u8a00\u3002</p> <p>MLIR \u57fa\u4e8e TableGen \u5236\u5b9a\u4e86\u4e00\u5957\u7b97\u5b50\u5b9a\u4e49\u89c4\u8303 ODS \u4ee5\u53ca\u5bf9\u5e94\u7684\u540e\u7aef OpDefinitionsGen</p> <p>OneFlow \u5728 ODS \u7684\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e86 TableGen OneFlow \u540e\u7aef\uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u5b9a\u4e49 OneFlow user op\u3002</p> <p>\u56e0\u6b64\uff0cOneFlow \u7684 user op \u5b9a\u4e49\u5199\u5728 OneFlowUserOps.td \u6587\u4ef6\u4e2d\u3002</p>"},{"location":"OneFlow/forward/#op","title":"\u5f00\u53d1 op","text":"<p>\u5728 OneFlow \u4e2d\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684 user op\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\u56fe\u3002</p> <p></p> <p>\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b4\u6b65\uff1a 1. \u5b9a\u4e49 op 2. \u5b9e\u73b0 kernel \u8ba1\u7b97\u903b\u8f91 3. \u5bfc\u51fa functional \u63a5\u53e3 4. \u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91 (\u4e0a\u56fe\u4e2d 4. 5.)</p>"},{"location":"OneFlow/forward/#op_1","title":"\u5b9a\u4e49 op","text":"<p>\u5b9a\u4e49 op \u6307\u7684\u662f\uff0c\u5bf9 op \u7684\u540d\u79f0\uff0cop \u7684\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u548c op \u7684\u5c5e\u6027\u8fdb\u884c\u58f0\u660e\u3002 OneFlow \u9075\u5faa MLIR \u7684 ODS\uff08Operation Definition Specification\uff09 \u5b9e\u73b0\u4e86\u81ea\u5df1\u7684 MLIR OneFlow Dialect\u3002 \u5728\u7b97\u5b50\u5b9a\u4e49\u65b9\u9762\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5404\u79cd\u63a8\u5bfc\u51fd\u6570\u548c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u63a5\u53e3\u90fd\u53ef\u4ee5\u59d4\u6258\u7ed9 ODS\uff0c\u964d\u4f4e\u4e86\u4eba\u5de5\u624b\u5199\u51fa\u9519\u7684\u6982\u7387\uff0c\u540e\u7eed\u4f18\u5316\u3001\u683c\u5f0f\u8f6c\u5316\u7b49\u6d41\u7a0b\u53ef\u4ee5\u66f4\u7075\u6d3b\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2a OneFlow user op\uff0c\u4e3b\u8981\u5305\u62ec 5 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\uff1a</p> <ul> <li>op class</li> <li>\u8f93\u5165 input</li> <li>\u8f93\u51fa output</li> <li>\u5c5e\u6027 attrs</li> <li>\u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3</li> </ul>"},{"location":"OneFlow/forward/#op-class","title":"op class","text":"<p>\u53ef\u4ee5\u5728 oneflow/ir/include/OneFlow/OneFlowUserOps.td \u67e5\u770b op \u5b9a\u4e49\u7684\u6e90\u7801\u3002</p> <p>\u4ee5 <code>def</code> \u5173\u952e\u5b57\u5f00\u5934\u5b9a\u4e49\u4e00\u4e2a op\uff0c\u8be5 op \u7ee7\u627f <code>OneFlow_BaseOp</code>\uff0c\u540c\u65f6\u6307\u5b9a <code>OneFlow_BaseOp</code> \u7684\u6a21\u7248\u53c2\u6570\u3002 \u6a21\u7248\u53c2\u6570\u4f9d\u6b21\u4e3a op type name\u3001Trait \u5217\u8868\u3002</p> <pre><code>def OneFlow_LeakyReluYZHOp : OneFlow_BaseOp&lt;\"leaky_relu_yzh\", [NoSideEffect, DeclareOpInterfaceMethods&lt;UserOpCompatibleInterface&gt;]&gt; {\n//...\n}\n</code></pre> <p>\u5176\u4e2d <code>\"leaky_relu_yzh\"</code> \u662f\u6307\u5b9a\u7684 op type name\u3002\u6bcf\u4e2a op \u90fd\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684 op type name \u4f5c\u4e3a\u5168\u5c40\u6807\u8bc6\u7b26\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570\u662f\u4e00\u4e2a list\uff08<code>[...]</code>\uff09\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a Trait\uff0cOneFlow \u4e2d\u5e38\u7528\u7684\u6709\uff1a</p> <ul> <li><code>NoSideEffect</code> \u8868\u793a\u8be5\u7b97\u5b50\u65e0\u526f\u4f5c\u7528\uff08\u5373\u4e0d\u4f1a\u6539\u53d8\u5185\u5b58\u3001\u7f51\u7edc\u3001\u7ba1\u9053\u3001\u78c1\u76d8\u7b49\u7684\u7cfb\u7edf\u72b6\u6001\uff09\uff0c\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u6307\u5bfc\u67d0\u4e9b\u4f18\u5316\u64cd\u4f5c</li> <li><code>NoGrad</code> \u8868\u793a\u8be5\u7b97\u5b50\u5728\u6570\u5b66\u4e0a\u6ca1\u6709\u68af\u5ea6\uff08\u4e0d\u53ef\u5bfc\uff09</li> <li><code>CpuOnly</code> \u8868\u793a\u8be5\u7b97\u5b50\u53ea\u652f\u6301\u5728 CPU \u8bbe\u5907\u4e0a\u6267\u884c</li> <li><code>SupportNonContiguous</code> \u8868\u793a\u8be5\u7b97\u5b50\u662f\u5426\u652f\u6301 NonContiguous \u5f20\u91cf\uff08\u5173\u4e8e Contiguous Tensor \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u53c2\u8003 PyTorch Internals \u4e2d\u7684\u76f8\u5173\u5185\u5bb9 \uff09</li> </ul>"},{"location":"OneFlow/forward/#input-output","title":"\u8f93\u5165 input \u4e0e\u8f93\u51fa output","text":"<p>\u901a\u8fc7\u91cd\u5199 <code>input</code> \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u5165\uff0c\u6bd4\u5982</p> <pre><code>// \u4e00\u4e2a\u8f93\u5165 x\nlet input = (ins\nOneFlow_Tensor:$x\n);\n</code></pre> <p>\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf <code>x</code>\u3002\u8f93\u5165\u7684\u683c\u5f0f\u4e3a <code>\u8f93\u5165\u7c7b\u578b:$name</code>\u3002</p> <p>\u8f93\u5165\u7c7b\u578b\u76ee\u524d\u5305\u62ec\uff1a</p> <ul> <li><code>OneFlow_Tensor</code></li> <li><code>Variadic&lt;OneFlow_Tensor&gt;</code>\uff1a\u6307\u53ef\u53d8 tensor\uff0c\u6bd4\u5982 concat op\uff0c\u652f\u6301 concat \u53ef\u53d8\u4e2a\u6570\u7684 tensor\u3002</li> <li><code>Optional&lt;OneFlow_Tensor&gt;</code>\uff1a\u8868\u793a\u8fd9\u4e2a tensor \u662f\u53ef\u9009\u7684\uff0c\u65e2\u53ef\u4ee5\u6709\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff0c\u6bd4\u5982 conv op \u4e2d\u7684 add_output\u3002</li> </ul> <p>\u4e00\u4e2a op \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u8f93\u5165\uff0c\u6bd4\u5982\uff1a</p> <pre><code>  // \u4e24\u4e2a\u8f93\u5165\uff1aa, b\nlet input = (ins\nOneFlow_Tensor:$a,\nOneFlow_Tensor:$b\n);\n</code></pre> <p>\u901a\u8fc7\u91cd\u5199 <code>output</code> \u57df\u6765\u5b9a\u4e49 op \u7684\u8f93\u51fa\uff0c\u6bd4\u5982</p> <pre><code>let output = (outs\nOneFlow_Tensor:$out0,\nOneFlow_Tensor:$out1\n);\n</code></pre> <p>\u5b9a\u4e49\u4e86 2 \u4e2a\u8f93\u51fa\u5f20\u91cf\u3002</p>"},{"location":"OneFlow/forward/#attrs","title":"\u5c5e\u6027 attrs","text":"<p>\u901a\u8fc7\u91cd\u5199 <code>attrs</code> \u57df\u5b9a\u4e49 op \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u5b9a\u4e49 dropout \u4e2d\u7684 <code>rate</code> \u5c5e\u6027\uff0c</p> <pre><code>  let attrs = (ins\nDefaultValuedAttr&lt;F32Attr, \"0.\"&gt;:$rate\n);\n</code></pre> <p>\u5b83\u8868\u793a\u540d\u4e3a <code>$rate</code> \u7684\u7c7b\u578b\u662f <code>F32Attr</code>\uff0c\u9ed8\u8ba4\u503c\u662f <code>0.</code>\u3002\u4e5f\u53ef\u4ee5\u4e0d\u6307\u5b9a\u9ed8\u8ba4\u503c\uff1a</p> <pre><code>  let attrs = (ins\nF32Attr:$rate\n);\n</code></pre> <p>I32Attr\u3001F32Attr\u3001BoolAttr\u3001StrAttr\u3001I32ArrayAttr \u7b49\u5e38\u89c1\u57fa\u7840\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u5728 OpBase.td \u4e2d\u3002</p> <p>OneFlow \u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5982 ShapeAttr\u3001DTArrayAttr \u7b49\u5b9a\u4e49\u5728 OneFlowBase.td \u4e2d\u3002</p>"},{"location":"OneFlow/forward/#_2","title":"\u5bfc\u51fa\u5e76\u5b9e\u73b0\u63a8\u5bfc\u63a5\u53e3","text":"<p>\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u57df\uff0c\u7528\u4e8e\u6307\u5b9a\u662f\u5426\u751f\u6210\u5bf9\u5e94\u7684\u63a5\u53e3\u3002\u8fd9\u4e9b\u63a5\u53e3\u5f80\u5f80\u662f\u6784\u5efa\u8ba1\u7b97\u56fe\u8fc7\u7a0b\u4e2d\u7684\u63a8\u5bfc\u63a5\u53e3\u3002</p> <p>\u6bd4\u5982 shape \u63a8\u5bfc\uff08\u6839\u636e\u8f93\u5165\u7684 shape \u63a8\u5bfc\u8f93\u51fa\u7684\u63a8\u5bfc\uff09\u3001data type \u63a8\u5bfc\u3001SBP \u63a8\u5bfc\u7b49\u3002</p> <p>OneFlow-TableGen \u4ec5\u8d1f\u8d23\u751f\u6210\u8fd9\u4e9b\u51fd\u6570\u7684\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u5728\u5176\u81ea\u52a8\u751f\u6210\u7684 cpp \u6587\u4ef6\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0d\u4f1a\u751f\u6210\u4e0b\u5217\u4efb\u4f55\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u9700\u8981\u751f\u6210\u54ea\u4e9b\u63a5\u53e3\u3002</p> <pre><code>  let has_check_fn = 1;                         // \u751f\u6210\u5c5e\u6027\u68c0\u67e5\u63a5\u53e3\nlet has_logical_tensor_desc_infer_fn = 1;     // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3\nlet has_physical_tensor_desc_infer_fn = 1;    // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3\nlet has_get_sbp_fn = 1;                       // \u751f\u6210 get sbp \u63a5\u53e3\nlet has_sbp_signature_infer_fn = 1;           // \u751f\u6210 sbp signature \u63a8\u5bfc\u63a5\u53e3\uff0c\u672a\u6765\u4f1a\u79fb\u9664\uff0c\u63a8\u8350\u4f7f\u7528 has_nd_sbp_infer_fn\nlet has_data_type_infer_fn = 1;               // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3\nlet has_device_and_stream_infer_fn = 1;       // \u751f\u6210 device \u63a8\u5bfc\u63a5\u53e3\nlet has_input_arg_modify_fn = 1;              // \u751f\u6210\u8f93\u5165 modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49\nlet has_output_arg_modify_fn = 1;             // \u751f\u6210\u8f93\u51fa modify \u63a5\u53e3\uff0c\u6bd4\u5982\u8bbe\u7f6e is_mutable\u3001requires_grad\uff08\u7528\u4e8eLazy\uff09\u7b49\nlet has_output_blob_time_shape_infer_fn = 1;  // \u751f\u6210\u8f93\u51fa time shape \u63a8\u5bfc\u63a5\u53e3\nlet has_nd_sbp_infer_fn = 1;                  // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3\n</code></pre> <p>\u4e00\u822c\u5e38\u7528\u7684\u662f\u4e0b\u9762\u51e0\u4e2a\uff0c</p> <pre><code>    let has_logical_tensor_desc_infer_fn = 1;     // \u751f\u6210 logical shape \u63a8\u5bfc\u63a5\u53e3\nlet has_physical_tensor_desc_infer_fn = 1;    // \u751f\u6210 physical shape \u63a8\u5bfc\u63a5\u53e3\nlet has_data_type_infer_fn = 1;               // \u751f\u6210 data type \u63a8\u5bfc\u63a5\u53e3\nlet has_nd_sbp_infer_fn = 1;                  // \u751f\u6210 nd sbp \u63a8\u5bfc\u63a5\u53e3\n</code></pre> <p>\u4e86\u89e3\u5b8c\u4e0a\u9762\u8fd9\u4e9b\u6982\u5ff5\u548c\u7528\u6cd5\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u4fee\u6539 oneflow/ir/include/OneFlow/OneFlowUserOps.td\u6587\u4ef6\u3002</p> <p>leaky_relu_yzh op \u5b8c\u6574\u7684\u5b9a\u4e49\u89c1 \u8fd9\u91cc\uff1a</p> <p>\u5728 <code>OneFlowUserOps.td</code> \u4e2d\u65b0\u589eOp\u5b9a\u4e49\u4e4b\u540e\uff0c\u91cd\u65b0 make \u540e\u4f1a\u81ea\u52a8\u5728 build \u76ee\u5f55\u4e0b\u7684 <code>oneflow/core/framework/</code> \u76ee\u5f55\u4e0b\u751f\u6210\u6587\u4ef6\u4ee5\u4e0b\u51e0\u4e2a\u6587\u4ef6\uff1a</p> <ul> <li><code>op_generated.h</code>\uff1a\u7531\u89e3\u6790 <code>.td</code> \u6587\u4ef6\u751f\u6210\u7684 op C++ \u7c7b</li> <li><code>op_generated.cpp</code>\uff1a\u7531\u89e3\u6790 <code>.td</code> \u6587\u4ef6\u751f\u6210\u7684 op \u6ce8\u518c\u4ee3\u7801\uff08\u5305\u542b\u8c03\u7528 <code>REGISTER_USER_OP</code> \u5b8f\u7684\u4ee3\u7801\uff09</li> </ul> <p>\u4e4b\u540e\u9700\u8981\u505a\u7684\u5c31\u662f\u5728 oneflow/user/ops \u76ee\u5f55\u4e0b\u65b0\u52a0\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u7528\u4e8e\u5b9e\u73b0 op \u7684\u63a5\u53e3\u3002</p> <p>\u6bd4\u5982 leaky_relu_yzh \u5bf9\u5e94\u7684\u6587\u4ef6\u5728 oneflow/user/ops/leaky_relu_yzh_op.cpp</p> <p>\u5b9e\u73b0\u4e86\u63a8\u5bfc\u903b\u8f91\u5f20\u91cf\u3001\u63a8\u5bfc\u7269\u7406\u5f20\u91cf\u3001\u63a8\u5bfc SBP \u4fe1\u606f\u4ee5\u53ca\u63a8\u5bfc\u8f93\u51fa\u6570\u636e\u7c7b\u578b\u5404\u63a5\u53e3\u3002</p>"},{"location":"OneFlow/forward/#kernel","title":"\u5b9e\u73b0 Kernel \u903b\u8f91","text":"<p>op \u7684\u8ba1\u7b97\u652f\u6301\u591a\u79cd\u8bbe\u5907\uff08\u5982 CPU\u3001GPU\u3001DCU \u7b49\uff09\uff0c\u6240\u4ee5\u8981\u5206\u522b\u5b9e\u73b0\u8ba1\u7b97\u903b\u8f91\u3002</p> <p>\u76f8\u5173\u4ee3\u7801\uff1a</p> <ul> <li>Leaky ReLU CPU Kernel</li> <li>Leaky ReLU GPU Kernel</li> </ul>"},{"location":"OneFlow/forward/#cpu","title":"CPU \u8ba1\u7b97\u903b\u8f91","text":"<pre><code>template&lt;typename T&gt;\nclass CpuLeakyReluYZHKernel final : public user_op::OpKernel {\npublic:\nCpuLeakyReluYZHKernel() = default;\n~CpuLeakyReluYZHKernel() = default;\nprivate:\nvoid Compute(user_op::KernelComputeContext* ctx) const override {\nconst user_op::Tensor* x = ctx-&gt;Tensor4ArgNameAndIndex(\"x\", 0);\nuser_op::Tensor* y = ctx-&gt;Tensor4ArgNameAndIndex(\"y\", 0);\nconst int32_t elem_cnt = x-&gt;shape().elem_cnt();\nconst T* x_ptr = x-&gt;dptr&lt;T&gt;();\nT* y_ptr = y-&gt;mut_dptr&lt;T&gt;();\nconst auto alpha = ctx-&gt;Attr&lt;float&gt;(\"alpha\");\nFOR_RANGE(int32_t, i, 0, elem_cnt) { y_ptr[i] = x_ptr[i] &gt; 0 ? x_ptr[i] : alpha * x_ptr[i]; }\n}\nbool AlwaysComputeWhenAllOutputsEmpty() const override { return false; }\n};\n</code></pre> <p>\u5728 OneFlow \u4e2d\u5b9e\u73b0 kernel\uff0c \u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7ee7\u627f\u81ea <code>oneflow::user_op::OpKernel</code> \u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u5176\u4e2d\u7684\u865a\u51fd\u6570\u3002 \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u91cd\u5199\u4e86 <code>Compute</code> \u4e0e <code>AlwaysComputeWhenAllOutputsEmpty</code> \u4e24\u4e2a\u865a\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u610f\u4e49\u5206\u522b\u662f\uff1a</p> <ul> <li><code>Compute</code> \u5fc5\u987b\u91cd\u5199\uff0c\u5728\u5176\u4e2d\u5b9e\u73b0\u5177\u4f53\u7684\u8fd0\u7b97\u903b\u8f91</li> <li><code>AlwaysComputeWhenAllOutputsEmpty</code> \u5fc5\u987b\u91cd\u5199\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570 op \u800c\u8a00\uff0c\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u5bf9\u4e8e\u6781\u5c11\u6570\u5185\u90e8\u9700\u8981\u7ef4\u62a4\u72b6\u6001\uff0c\u5373\u4f7f\u8f93\u51fa\u4e3a\u7a7a\u4e5f\u9700\u8981\u8c03\u7528 kernel \u8fdb\u884c\u8ba1\u7b97\u7684 op \u800c\u8a00\uff0c\u5e94\u8be5\u8fd4\u56de true</li> </ul> <p><code>Compute</code> \u65b9\u6cd5\u4e2d\u901a\u8fc7\u8c03\u7528 <code>user_op::KernelComputeContext* ctx</code> \u4e2d\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u5f20\u91cf\u3001\u8f93\u51fa\u5f20\u91cf\u3001attr \u5177\u4f53\u7684\u6570\u636e\uff0c\u518d\u6309\u7167\u7b97\u5b50\u7684\u7b97\u6cd5\u903b\u8f91\u5bf9\u5b83\u4eec\u8fdb\u884c\u5904\u7406\u3002 \u4ee5\u4e0b\u662f\u5bf9 <code>CpuLeakyReluKernel::Compute</code> \u5904\u7406\u903b\u8f91\u7684\u89e3\u8bfb\uff1a </p> <ul> <li>\u9996\u5148\u53d6\u5f97 <code>\"x\"</code>\uff0c<code>\"y\"</code> \u4e24\u4e2a Tensor\u3002\u4f20\u5165<code>Tensor4ArgNameAndIndex</code>\u7684\u5b57\u7b26\u4e32\u8981\u548c\u4e4b\u524d\u5728<code>OneFlowUserOps.td</code>\u8bbe\u7f6e\u7684\u540d\u79f0\u4e00\u81f4</li> <li>\u83b7\u53d6 <code>x</code> \u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u7528\u4e8e <code>for</code> \u5faa\u73af\u8fdb\u884c\u8ba1\u7b97</li> <li>\u83b7\u53d6\u5c5e\u6027 <code>alpha</code></li> <li>\u8fdb\u5165\u6b21\u6570\u4e3a <code>elem_cnt</code> \u7684 <code>for</code> \u5faa\u73af\uff0c\u5c06\u7ed3\u679c\u5199\u5165</li> </ul>"},{"location":"OneFlow/forward/#kernel_1","title":"\u6ce8\u518c Kernel","text":"<p>\u5b9e\u73b0 kernel \u7c7b\u540e\uff0c\u9700\u8981\u8c03\u7528 <code>REGISTER_USER_KERNEL</code> \u6ce8\u518c\u3002</p> <pre><code>#define REGISTER_CPU_LEAKY_RELU_YZH_KERNEL(dtype)                     \\\n  REGISTER_USER_KERNEL(\"leaky_relu_yzh\")                              \\\n      .SetCreateFn&lt;CpuLeakyReluYZHKernel&lt;dtype&gt;&gt;()                    \\\n      .SetIsMatchedHob((user_op::HobDeviceType() == DeviceType::kCPU) \\\n                       &amp;&amp; (user_op::HobDataType(\"y\", 0) == GetDataType&lt;dtype&gt;::value));\n</code></pre> <p>\u8fd9\u91cc\u4f1a\u8c03\u7528<code>REGISTER_USER_KERNEL</code>\u5b8f\uff0c\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <ol> <li>op type name\uff1a\u4e3a\u54ea\u4e2a op \u6ce8\u518c kernel</li> <li><code>SetCreateFn&lt;T&gt;()</code>\uff1a\u8be5\u6a21\u677f\u65b9\u6cd5\u7684\u6a21\u677f\u53c2\u6570 <code>T</code>\uff0c\u5c31\u662f\u6211\u4eec\u5b9e\u73b0\u7684 kernel \u7c7b\uff0cOneFlow Runtime \u5c06\u4f7f\u7528\u5b83\u521b\u5efa kernel \u5bf9\u8c61\u3002</li> <li><code>SetIsMatchedHob</code>\uff1a\u56e0\u4e3a\u4e00\u4e2a op \u53ef\u80fd\u6709\u591a\u4e2a kernel\uff0c\u8981\u60f3\u6839\u636e\u7269\u7406\u8bbe\u5907\u53ca\u6570\u636e\u683c\u5f0f\u7684\u4e0d\u540c\u800c\u9009\u62e9\u4e0d\u540c\u7684 kernel \u8fdb\u884c\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u8c03\u7528 SetIsMatchedHob \u8fdb\u884c\u8bbe\u7f6e\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u4e3a true \u65f6\uff0cOneFlow \u5c06\u8c03\u7528\u8be5 kernel \u5b8c\u6210\u8ba1\u7b97\u3002\u4ee5\u4e0a\u4ee3\u7801\u7684\u5339\u914d\u903b\u8f91\u662f\uff1a\u5f53\u786c\u4ef6\u8bbe\u5907\u4e3a <code>cpu</code>\uff0c\u4e14 <code>y</code> \u7684\u6570\u636e\u7c7b\u578b\u548c <code>dtype</code> \u4e00\u81f4\u65f6\uff0c\u9009\u62e9\u8c03\u7528\u6ce8\u518c\u7684 kernel \u7c7b\uff08<code>CpuLeakyReluYZHKernel&lt;dtype&gt;</code>\uff09\u3002</li> </ol>"},{"location":"OneFlow/forward/#gpu","title":"GPU \u8ba1\u7b97\u903b\u8f91","text":"<p>CUDA \u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6\u5165\u95e8\u53ef\u4ee5\u53c2\u8003\uff1a</p> <ul> <li>\u89c6\u9891\uff1aCUDA \u7684\u7531\u6765</li> <li>\u89c6\u9891\uff1aCUDA \u7684\u5165\u95e8\u5c0f\u7a0b\u5e8f</li> <li>\u89c6\u9891\uff1a\u7ebf\u7a0b\u5c42\u7ea7</li> </ul> <p>\u4e0d\u8fc7\u4ee5\u4e0a\u7684\u89c6\u9891\u90fd\u65e0\u6cd5\u66ff\u4ee3\u81ea\u5df1\u8ba4\u771f\u5b66\u4e60\u5b98\u65b9\u8d44\u6599\uff1aCUDA C Programming Guide</p> <p>\u4e86\u89e3\u4e86 CUDA \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5c31\u4e0d\u96be\u7406\u89e3 leaky_relu CUDA \u7248\u672c\u7684\u5b9e\u73b0\u3002</p> <p>\u9996\u5148\u5b9a\u4e49\u4e86 leaky_relu \u524d\u5411\u8fd0\u7b97\u7684 CUDA \u6838\u51fd\u6570</p> <pre><code>template&lt;typename T&gt;\n__global__ void LeakyReluForwardGpu(const int n, const float alpha, const T* x, T* y) {\nCUDA_1D_KERNEL_LOOP(i, n) { y[i] = x[i] &gt; 0 ? x[i] : x[i] * alpha; }\n}\n</code></pre> <p>\u5176\u4e2d\u8c03\u7528\u4e86\u5b8f CUDA_1D_KERNEL_LOOP \u8fdb\u884c\u8fd0\u7b97</p> <p>\u5728 Compute \u51fd\u6570\u4e2d\uff0c\u8c03\u7528\u4e86 <code>RUN_CUDA_KERNEL</code> (\u4e5f\u662f\u5b9a\u4e49\u5728 <code>cuda_util.h</code> \u8fd9\u4e2a\u6587\u4ef6\u4e2d)\u8fd9\u4e2a\u5b8f\u542f\u52a8\u6838\u51fd\u6570\u3002</p> <p>\u5bf9\u5e94\u7684 GPU kernel \u7c7b\u7684\u5b9e\u73b0\u89c1\uff1a</p> <p>https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L32-L49</p> <p>\u5176\u4e2d\u7528\u5230\u4e86\u542f\u52a8 kernel \u7684\u5b8f <code>RUN_CUDA_KERNEL</code>\uff0c\u5b83\u7684\u5b9a\u4e49\u662f:</p> <pre><code>#define RUN_CUDA_KERNEL(func, device_ctx_ptr, thread_num, ...)           \\\n  func&lt;&lt;&lt;SMBlocksNum4ThreadsNum(thread_num), kCudaThreadsNumPerBlock, 0, \\\n         (device_ctx_ptr)-&gt;cuda_stream()&gt;&gt;&gt;(__VA_ARGS__)\n</code></pre> <ol> <li>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6838\u51fd\u6570\u540d\u5b57</li> <li>\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f device context\uff0c\u540e\u7eed\u83b7\u53d6\u5bf9\u5e94\u7684 cuda_stream</li> <li>\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u8981\u542f\u52a8\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4f1a\u6839\u636e\u7ebf\u7a0b\u6570\u91cf\u6765\u8ba1\u7b97\u6240\u9700\u7684 Block \u6570\u76ee\u3002</li> </ol> <p>\u56e0\u4e3a leaky relu \u662f elementwise \u8fd0\u7b97\uff0c\u5404\u4e2a\u5143\u7d20\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u542f\u52a8\u4e86 elem_cnt \u4e2a\u7ebf\u7a0b\u3002</p> <p>\u540e\u7eed\u7684\u6ce8\u518c\u4e0e CPU \u7248\u672c\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u76f4\u63a5\u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\u5373\u53ef\uff1a</p> <p>https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/user/kernels/leaky_relu_yzh_kernel.cu#L51-L62</p> <p>\u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u8bbe\u5907\u7c7b\u7684 Compute \u4e2d\u5927\u90e8\u5206\u4ee3\u7801\u662f\u91cd\u590d\u7684\u3002\u4e00\u79cd\u66f4\u4f18\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\u662f\u7528\u4e00\u4e2a <code>.cpp</code> \u6587\u4ef6\u5b8c\u6210 kernel \u548c\u6ce8\u518c\u7684\u903b\u8f91\uff0c<code>.cu</code> \u6587\u4ef6\u7f16\u5199 GPU Kernel \u51fd\u6570\u548c GPU \u6a21\u677f\u7279\u5316\u7684\u4ee3\u7801\uff0c<code>.h</code> \u6587\u4ef6\u7528\u4e8e\u5b9a\u4e49\u548c\u7f16\u5199\u6ce8\u518c\u5b8f\u3002\u53ef\u53c2\u8003 dim_gather_kernel_* \u4e2d\u7684\u4ee3\u7801\u3002</p> <p>OneFlow \u4e3a\u4e86\u9002\u914d\u591a\u79cd\u8bbe\u5907\uff0c\u8fd8\u63d0\u4f9b\u4e86 Primitive \u7ec4\u4ef6\uff0c\u53ef\u4ee5\u53c2\u8003\uff1aPrimitive PR</p>"},{"location":"OneFlow/forward/#functional","title":"\u5bfc\u51fa functional \u63a5\u53e3","text":"<p>\u5173\u4e8e functional \u63a5\u53e3\u5c42\u7684\u8be6\u7ec6\u4ecb\u7ecd\u5728\u8fd9\u91cc\uff1a https://github.com/Oneflow-Inc/oneflow/wiki/Functional-Interface</p> <p>\u6982\u62ec\u800c\u8a00\uff0cfunctional \u5c42\u8d77\u5230\u4e86\u201c\u4e0a\u63a5 Python\uff0c\u4e0b\u8054 C++\u201d\u7684\u4f5c\u7528\uff1a</p> <pre><code>   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Module    \u2502\n   \u2502  (Python)   \u2502\n   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n   \u2502             \u2502\n   \u2502 Functional  \u2502\n   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n   \u2502             \u2502\n   \u2502 Op/Kernels  \u2502\n   \u2502   (C++)     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u56e0\u6b64\uff0c\u5728\u4e0a\u6587\u5b9a\u4e49 op \u548c\u6ce8\u518c kernel \u540e\uff0c\u9700\u8981\u4e3a\u7b97\u5b50\u5bfc\u51fa functional \u63a5\u53e3\uff0c\u624d\u80fd\u4f7f\u7528\u6237\u901a\u8fc7 Python \u4ee3\u7801\u8c03\u7528\u8be5\u7b97\u5b50\u3002</p> <p>\u5bfc\u51fa functional \u63a5\u53e3\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c</li> <li>\u5728 oneflow/core/functional/functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0 </li> </ol>"},{"location":"OneFlow/forward/#functor","title":"\u5b9e\u73b0\u5bf9\u5e94\u7684 functor \u5e76\u6ce8\u518c","text":"<p>\u5bf9\u4e8e leaky_relu_yzh op\uff0c\u5728 activation_functor.cpp \u4e2d\uff0c\u5bf9\u5176\u8fdb\u884c\u5b9a\u4e49\uff1a</p> <pre><code>class LeakyReluYZHFunctor {\npublic:\nLeakyReluYZHFunctor() {\nop_ = CHECK_JUST(one::OpBuilder(\"leaky_relu_yzh\").Input(\"x\").Output(\"y\").Build());\n}\nMaybe&lt;Tensor&gt; operator()(const std::shared_ptr&lt;one::Tensor&gt;&amp; x, const float&amp; alpha) const {\nMutableAttrMap attrs;\nJUST(attrs.SetAttr&lt;float&gt;(\"alpha\", alpha));\nreturn OpInterpUtil::Dispatch&lt;one::Tensor&gt;(*op_, {x}, attrs);\n}\nprivate:\nstd::shared_ptr&lt;OpExpr&gt; op_;\n};\n</code></pre> <ul> <li>\u5728\u6784\u9020\u51fd\u6570\u91cc\uff0c\u6784\u9020\u4e86 <code>leaky_relu</code> \u8fd9\u4e2aop</li> <li>\u5b9e\u73b0 <code>operator()</code> \u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u901a\u8fc7 <code>Dispatch</code> \u8c03\u7528\u6784\u9020\u597d\u7684 op\uff0c\u5e76\u5206\u522b\u4f20\u5165\u8f93\u5165\uff0c\u5c5e\u6027</li> </ul> <p>\u7c7b\u4f3c\u7684\u6211\u4eec\u4e5f\u7ed9 LeakyReluGrad \u5bfc\u51fa functional \u63a5\u53e3\uff0c\u4ee5\u4fbf\u540e\u7eed\u7f16\u5199\u6c42\u5bfc\u903b\u8f91\u4f7f\u7528</p> <p>\u6700\u540e\u6211\u4eec\u9700\u8981\u6ce8\u518c\u5230 Functional Library\uff1a</p> <p>https://github.com/Oneflow-Inc/oneflow/blob/7ab4b0f08c86a6f8af08b44daa510725942288fb/oneflow/core/functional/impl/activation_functor.cpp#L610-L611</p> <pre><code>m.add_functor&lt;impl::LeakyReluYZHFunctor&gt;(\"LeakyReluYZH\"); // \u6ce8\u610f\u6700\u540e\u5b57\u7b26\u4e32\u4e2d\u7684\u540d\u5b57\u5728\u540e\u7eed\u7684 functional_api.yaml \u4e2d\u4f1a\u7528\u5230\n</code></pre> <p>\u901a\u8fc7 <code>m.add_functor</code> \u6ce8\u518c\u540e\u7684 functor\uff0c\u53ef\u4ee5\u5728 C++ \u5c42\u4f7f\u7528\uff0c\u5982\u901a\u8fc7 <code>functional::LeakyRelu</code> \u5c31\u53ef\u4ee5\u8c03\u7528 <code>LeakyReluFunctor</code>\u3002</p>"},{"location":"OneFlow/forward/#functional_apiyaml","title":"\u5728 functional_api.yaml \u4e2d\u6dfb\u52a0\u63a5\u53e3\u63cf\u8ff0","text":"<p>functional \u901a\u8fc7\u89e3\u6790 yaml \u914d\u7f6e\u6587\u4ef6\uff0c\u5728 build \u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5e2e\u6211\u4eec\u751f\u6210\u63a5\u53e3\u3002</p> <p>\u5728functional_api.yaml \u6587\u4ef6\u4e2d\uff0c\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u3002</p> <p>https://github.com/Oneflow-Inc/oneflow/pull/8350/files#diff-4b35c1dcdbae81b75439ba570bc149554ca85b83757430613fcb612ae25972afR572-R579</p> <pre><code>- name: \"leaky_relu_yzh\"\n  signature: \"Tensor (Tensor x, Float alpha) =&gt; LeakyReluYZH\"\n  bind_python: True\n</code></pre> <ul> <li>\u5176\u4e2d <code>name</code> \u8868\u793a\u5bfc\u51fa\u5230 Python \u63a5\u53e3\u540e\u51fd\u6570\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u5bfc\u51fa\u540e\u5728 Python \u4e0b\u4f7f\u7528\u5c31\u662f <pre><code>flow._C.leaky_relu_yzh(...)\n</code></pre></li> <li><code>signature</code> \u7528\u4e8e\u63cf\u8ff0\u63a5\u53e3\u539f\u578b\u53ca C++ \u4ee3\u7801\u7684\u5bf9\u5e94\u5173\u7cfb\u3002<code>=&gt;</code> \u5de6\u8fb9\u7684\u4e3a\u539f\u578b\uff1b<code>=&gt;</code> \u53f3\u8fb9\u4e3a\u5bf9\u5e94\u7684 Functional Library \u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u91cc<code>LeakyRelu</code> \u548c\u524d\u9762\u5bfc\u51fa\u65f6\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u81f4\u7684\u3002</li> <li><code>bind_python</code>\uff0c\u8868\u793a\u8fd9\u4e2a\u63a5\u53e3\u662f\u5426\u9700\u8981\u7ed1\u5b9a Python \u63a5\u53e3 \u3002\u6bd4\u5982\u4e0b\u9762\u7684 <code>leaky_relu_grad</code>\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728 Python \u5c42\u7528\u5230\uff08\u4f46\u4f1a\u5728 C++ \u5c42\u6c42\u5bfc\u4f7f\u7528\uff09\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e3a False\u3002</li> </ul> <p>\u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5c\u540e\uff0c\u65b0\u589e\u7684\u7b97\u5b50\u5df2\u7ecf\u652f\u6301\u6b63\u5411\u8fd0\u7b97\uff0c\u7f16\u8bd1\u597d\u4ee3\u7801\u4fbf\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7b80\u5355\u7684\u6d4b\u8bd5\uff1a</p> <pre><code>import oneflow as flow \nimport numpy as np\nx_tensor = flow.Tensor(np.random.randn(3, 3))\nout = flow._C.leaky_relu_yzh(x_tensor, alpha=0.2)\n</code></pre> <p>\u4f46\u662f\uff0c\u8fd8\u9700\u8981\u6ce8\u518c\u53cd\u5411\uff0c\u624d\u80fd\u652f\u6301\u53cd\u5411\u4f20\u64ad\u3002\u6211\u4eec\u4e5f\u5148\u5c06\u53cd\u5411\u9700\u8981\u7684 <code>LeakyReluGrad</code> \u5bfc\u51fa\u4e3a functional \u63a5\u53e3\u3002</p> <pre><code>- name: \"leaky_relu_yzh_grad\"\nsignature: \"Tensor (Tensor x, Tensor dy, Float alpha) =&gt; LeakyReluYZHGrad\"\nbind_python: False\n</code></pre>"},{"location":"OneFlow/forward/#_3","title":"\u5b9e\u73b0\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u903b\u8f91","text":"<p>\u53cd\u5411\u4f20\u64ad\u7684\u672c\u8d28\u5c31\u662f\u9ad8\u6570\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\uff0c\u53ea\u4e0d\u8fc7 Autodiff \u5c06\u94fe\u5f0f\u6cd5\u5219\u53d8\u5f97\u6a21\u5757\u5316\u3001\u6613\u590d\u7528\u3002</p> <p>\u53ef\u4ee5\u5148\u9605\u8bfb CSC321 Lecture 10: Automatic Differentiation  \u4e86\u89e3 autodiff \u7684\u57fa\u672c\u6982\u5ff5\u3002</p> <p>\u4ece\u903b\u8f91\u4e0a\u800c\u8a00\uff0c\u4e00\u4e2a\u7b97\u5b50\u5728\u53cd\u5411\u8fc7\u7a0b\u4e2d\u80fd\u591f\u6c42\u5bfc\u6570\uff0c\u4e00\u822c\u9700\u8981\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <ul> <li>\u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u8f93\u5165\u3001\u8f93\u51fa</li> <li>\u6b63\u5411\u8fc7\u7a0b\u7684 attr</li> <li>\u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e0a\u4e00\u5c42\uff08\u6b63\u5411\u8fc7\u7a0b\u4e2d\u7684\u4e0b\u4e00\u5c42\uff09\u4f20\u9012\u8fc7\u6765\u7684\u6b63\u5411\u8f93\u51fa\u7684\u68af\u5ea6</li> </ul> <p>\u672a\u6765 Graph \u6a21\u5f0f\u548c Eager \u6a21\u5f0f\u4e0b\u7684\u53cd\u5411\u903b\u8f91\u4f1a\u5408\u5e76\uff0c\u4f46\u76ee\u524d\u8fd8\u662f\u9700\u8981\u5206\u522b\u6ce8\u518c\u3002</p>"},{"location":"OneFlow/forward/#eager","title":"\u4e3a Eager \u6a21\u5f0f\u6ce8\u518c\u53cd\u5411","text":"<p>\u6c42\u5bfc\u90e8\u5206\u5728 oneflow/core/autograd/gradient_funcs/activation.cpp \u5b8c\u6210</p> <p>\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a</p> <ul> <li>LeakyReluYZHCaptureState \uff1a\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784\u4f53</li> </ul> <p>\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u6784\u4f53\uff0c\u7ee7\u627f\u81ea <code>AutoGradCaptureState</code>\uff0c\u7528\u4e8e\u5b58\u50a8 op \u7684\u5c5e\u6027\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u6c42\u5bfc\u3002</p> <pre><code>struct LeakyReluYZHCaptureState  : public AutoGradCaptureState {\nbool requires_grad; // \u8f93\u5165x\u662f\u5426\u9700\u8981\u68af\u5ea6\nfloat alpha=0.0; // \u8f93\u5165\u7684\u53c2\u6570alpha\n};\n</code></pre> <ul> <li>LeakyReluYZH \u7c7b\uff1a\u7ee7\u627f\u81ea <code>OpExprGradFunction</code> \u7684\u7c7b\u3002\u9700\u8981\u91cd\u5199\u4e09\u4e2a\u51fd\u6570\uff1a<code>Init</code>\u3001<code>Capture</code>\u3001<code>Apply</code>\u3002</li> </ul> <pre><code>class LeakyReluYZH : public OpExprGradFunction&lt;LeakyReluYZHCaptureState&gt; {\npublic:\nMaybe&lt;void&gt; Init(const OpExpr&amp; op) override {\n//...\n}\nMaybe&lt;void&gt; Capture(LeakyReluYZHCaptureState* ctx, const TensorTuple&amp; inputs,\nconst TensorTuple&amp; outputs, const AttrMap&amp; attrs) const override {\n//...\n}\nMaybe&lt;void&gt; Apply(const LeakyReluYZHCaptureState* ctx, const TensorTuple&amp; out_grads,\nTensorTuple* in_grads) const override {\n//...\n}\n};\n</code></pre> <ul> <li>Init\uff1a\u505a\u7684\u662f\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u53ef\u4ee5\u6839\u636e\u524d\u5411 op \u7684\u914d\u7f6e\uff0c\u6765\u521d\u59cb\u5316\u5c5e\u6027\u3002</li> </ul> <pre><code>  Maybe&lt;void&gt; Init(const OpExpr&amp; op) override {\nconst auto* fw_op_expr = dynamic_cast&lt;const UserOpExpr*&gt;(&amp;op);\nCHECK_NOTNULL_OR_RETURN(fw_op_expr);\nbase_attrs_ = MakeAttrMapFromUserOpConf(fw_op_expr-&gt;proto());\nreturn Maybe&lt;void&gt;::Ok();\n}\n</code></pre> <ul> <li>Capture\uff1a\u7528\u4e8e\u6355\u6349\u524d\u5411\u7684 Tensor\uff0c\u5c5e\u6027\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u6c42\u5bfc\u3002</li> </ul> <p>\u4ee5 LeakyReluYZH \u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230\uff1aa) \u8f93\u5165\u7684 Tensor\uff0c\u5f53 Tensor \u6570\u503c\u5927\u4e8e 0\uff0c\u68af\u5ea6\u4e3a 1\uff0c\u5f53\u5c0f\u4e8e 0\uff0c\u68af\u5ea6\u4e3a alpha b) alpha\u7684\u6570\u503c</p> <pre><code>  Maybe&lt;void&gt; Capture(LeakyReluYZHCaptureState* ctx, const TensorTuple&amp; inputs,\nconst TensorTuple&amp; outputs, const AttrMap&amp; attrs) const override {\nCHECK_EQ_OR_RETURN(inputs.size(), 1);                      // \u5224\u65ad\u8f93\u5165\u4e2a\u6570\u662f\u5426\u4e3a1\nctx-&gt;requires_grad = inputs.at(0)-&gt;requires_grad();        // \u5224\u65ad\u8f93\u5165\u662f\u5426\u9700\u8981\u68af\u5ea6\nif (!ctx-&gt;requires_grad) { return Maybe&lt;void&gt;::Ok(); }     // \u5982\u679c\u4e0d\u9700\u8981\u68af\u5ea6\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u6c42\u5bfc\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de Maybe&lt;void&gt;::Ok()\nComposedAttrMap composed_attrs(attrs, base_attrs_);\nctx-&gt;alpha = JUST(composed_attrs.GetAttr&lt;float&gt;(\"alpha\")); // \u83b7\u53d6 alpha\uff0c\u5e76\u5b58\u5165 ctx-&gt;alpha \u4e2d\nctx-&gt;SaveTensorForBackward(inputs.at(0));                  // \u8c03\u7528 SaveTensorForBackward \u65b9\u6cd5\uff0c\u4fdd\u5b58\u8f93\u5165\u7684 Tensor\nreturn Maybe&lt;void&gt;::Ok();\n}\n</code></pre> <ul> <li>Apply\uff1a\u5b9e\u9645\u8ba1\u7b97\u68af\u5ea6\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u5230\u5148\u524d\u7684 Tensor\uff0c\u5e76\u8c03\u7528 functional \u63a5\u53e3\u4e0b\u6ce8\u518c\u7684 LeakyReluGrad\uff0c\u6c42\u5f97\u68af\u5ea6\uff0c\u5e76\u8fd4\u56de</li> </ul> <pre><code>  Maybe&lt;void&gt; Apply(const LeakyReluYZHCaptureState* ctx, const TensorTuple&amp; out_grads,\nTensorTuple* in_grads) const override {\nCHECK_EQ_OR_RETURN(out_grads.size(), 1);  // \u68c0\u67e5\u68af\u5ea6 Tensor \u4e2a\u6570\u662f\u5426\u4e3a 1\nin_grads-&gt;resize(1);                      // \u56e0\u4e3a\u8f93\u5165\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec resize(1)\nif (ctx-&gt;requires_grad) {\nconst auto&amp; x = ctx-&gt;SavedTensors().at(0); // \u8c03\u7528 SavedTensors \u63a5\u53e3\uff0c\u62ff\u5230\u5148\u524d\u901a\u8fc7 SaveTensorForBackward \u63a5\u53e3\u4fdd\u5b58\u7684 Tensor\nin_grads-&gt;at(0) = JUST(functional::LeakyReluYZHGrad(x, out_grads.at(0), ctx-&gt;alpha)); // \u62ff\u5230 x\uff0cdy\uff0calpha\uff0c\u4f20\u5165\u7ed9 LeakyReluYZHGrad \u8ba1\u7b97\uff0c\u5e76\u5c06\u68af\u5ea6\u8fd4\u56de\u7ed9 in_grads-&gt;at(0)\n}\nreturn Maybe&lt;void&gt;::Ok();\n}\n</code></pre> <p>\u6700\u540e\u4e00\u6b65\u662f\u6ce8\u518c\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f op type name\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7ee7\u627f\u81ea <code>OpExprGradFunction</code> \u7684\u7c7b\u3002</p> <pre><code>REGISTER_OP_EXPR_GRAD_FUNCTION(\"leaky_relu_yzh\", LeakyReluYZH); // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7528\u4e8e\u6c42\u5bfc\u7684\u7c7b\u540d\n</code></pre>"},{"location":"OneFlow/test/","title":"Test","text":"<p>   how_to_test_user_op"},{"location":"OneFlow/utils/","title":"Utils","text":""},{"location":"OneFlow/utils/#_1","title":"\u5f15\u8a00","text":""},{"location":"OneFlow/utils/#_2","title":"\u5de5\u5177\u7bc7","text":"\u5f00\u53d1\u5de5\u5177 \u7b80\u4ecb Visual Studio Code Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002 VS Code \u63d2\u4ef6::clangd \u5206\u6790 C++ \u6587\u4ef6\uff0c\u5b9e\u73b0 C++\u4ee3\u7801\u8df3\u8f6c VS Code \u63d2\u4ef6::Python VS Code \u63d2\u4ef6 \u7528\u4e8e\u5206\u6790 Python \u6587\u4ef6\uff0c\u4e3b\u8981\u6709 \u4ee3\u7801\u8df3\u8f6c\uff0c\u53d8\u91cf\u7c7b\u578b\u5206\u6790\u7b49\u3002 VS Code \u63d2\u4ef6::Live Server \u542f\u52a8\u5e26\u6709\u5b9e\u65f6\u91cd\u8f7d\u529f\u80fd\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\uff0c\u7528\u4e8e\u9759\u6001\u548c\u52a8\u6001\u9875\u9762\u3002\u5b9e\u73b0 \u5728\u7ebf\u9884\u89c8 oneflow\u5f00\u53d1\u8fc7\u7a0b\u4e2d html \u6587\u6863\u3002 Debug\u5de5\u5177::pdb  pdb  \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6e90\u4ee3\u7801\u8c03\u8bd5\u5668\uff0c\u7528\u4e8ePython \u7a0b\u5e8f Debug\u5de5\u5177::GDB  GDB: \u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002"},{"location":"OneFlow/utils/#visual-studio-code","title":"Visual Studio Code","text":"<p>\u5b98\u65b9\u94fe\u63a5:  https://code.visualstudio.com/</p> <p>\u4f7f\u7528\u4ecb\u7ecd:  Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c~</p> <p>\u6ce8\u610f\u4e8b\u9879: ~</p>"},{"location":"OneFlow/utils/#clangd","title":"clangd","text":"<p>\u5b98\u65b9\u94fe\u63a5: https://github.com/clangd/clangd</p> <p>\u4f7f\u7528\u4ecb\u7ecd:   \u914d\u7f6e clangd \u6559\u7a0b </p> <p>\u6ce8\u610f\u4e8b\u9879: ~</p>"},{"location":"OneFlow/utils/#python","title":"Python","text":"<p>vscode \u63d2\u4ef6</p> <p></p> <p>\u5b98\u65b9\u94fe\u63a5: https://www.python.org/</p> <p>\u4f7f\u7528\u4ecb\u7ecd: \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22  Python   \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u5b89\u88c5\u4e4b\u540e\uff0c\u6253\u5f00\u4e00\u4e2a\u65b0\u7684.py\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879: </p> <ol> <li> <p>\u5207\u6362 Python \u89e3\u91ca\u5668\uff1a  Crtl+Shift + P \u641c\u7d22  <code>Python:select Interpreter</code>   \u914d\u7f6e\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002 \u4ee5\u540e\u6bcf\u6b21\u6253\u5f00VsCode\uff0c\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002good\uff01 </p> </li> <li> <p>VScode\u5e95\u90e8\u72b6\u6001\u680f\u4e0d\u89c1\uff0c \u8bf7\u5982\u4e0b\u56fe\u52fe\u9009  Status Bar</p> </li> </ol> <p></p>"},{"location":"OneFlow/utils/#live-server","title":"Live Server","text":"<p>\u5b98\u65b9\u94fe\u63a5\uff1ahttps://github.com/ritwickdey/vscode-live-server-plus-plus</p> <p>\u4f7f\u7528\u4ecb\u7ecd: \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22  Live Server   \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a </p> <p>\u6253\u5f00\u4e00\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u5355\u51fb\u72b6\u6001\u680f\u4e2d\u7684    GO Live  \u4ee5\u6253\u5f00/\u5173\u95ed\u670d\u52a1\u3002</p> <p></p>"},{"location":"OneFlow/utils/#pdb","title":"pdb","text":"<p>pdb --- Python \u7684\u8c03\u8bd5\u5668\u00b6 </p> <p>\u5b98\u65b9\u94fe\u63a5\uff1ahttps://docs.python.org/zh-cn/3/library/pdb.html</p> <p>\u4f7f\u7528\u4ecb\u7ecd: https://docs.python.org/zh-cn/3/library/pdb.html</p> <p>\u6ce8\u610f\u4e8b\u9879: ~ </p>"},{"location":"OneFlow/utils/#gdb","title":"GDB","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd OneFlow \u4e2d\u4f7f\u7528 gdb  debug</p> <p>Cmake \u65f6\u5019\u4f7f\u7528 -DCMAKE_BUILD_TYPE=Debug </p>  oneflow Debug \u65b9\u5f0f\u7f16\u8bd1\u793a\u4f8b <pre><code>git clone git@github.com:Oneflow-Inc/oneflow.git &amp;&amp; cd oneflow mkdir -p build &amp;&amp; cd build\n\ncmake .. -C ../cmake/caches/cn/cuda.cmake   -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda  \\\n-DCUDNN_ROOT_DIR=/usr/local/cudnn -DCMAKE_GENERATOR=Ninja -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_EXPORT_COMPILE_COMMANDS=1\nninja -j32\n</code></pre> <p>\u6211\u662f\u9ed1\u4f53\u5b57</p> <p>\u6211\u662f\u5fae\u8f6f\u96c5\u9ed1</p> <p>\u6211\u662f\u534e\u6587\u5f69\u4e91</p> <p>\u6211\u662f\u7ea2\u8272</p> <p>\u6211\u662f\u7eff\u8272</p> <p>\u6211\u662f\u84dd\u8272</p> <p>\u6211\u662f\u5c3a\u5bf8</p> <p>\u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5</p> <p>\u6211\u662f\u9ed1\u4f53\uff0c\u7eff\u8272\uff0c\u5c3a\u5bf8\u4e3a5</p> <p> </p>"},{"location":"PyTorch/Ox01/","title":"Ox01","text":""},{"location":"PyTorch/Ox01/#gdbpytorchc","title":"gdb\u5bf9pytorch\u8fdb\u884cc++\u8bed\u8a00\u7ea7\u8c03\u8bd5\u7684\u8fc7\u7a0b","text":"\u7f16\u8bd1\u5b89\u88c5PyTorch\u8f6f\u4ef6\u5305  <pre><code>git clone https://github.com/pytorch/pytorch.git cd pytorch\n\nDEBUG=1  python setup.py develop\n</code></pre>  \u68c0\u6d4b\u662f\u5426\u5b89\u88c5\u6210\u529f  <pre><code>(pytorch_learn) fengwen@oneflow:/data/dataset/fengwen/pytorch/.fengwen$ python\nPython 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0] :: Anaconda, Inc. on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; torch.cuda.is_available()   True\n</code></pre> <p>\u5378\u8f7d PyTorch \u8f6f\u4ef6\u5305 <pre><code>pip uninstall torch &amp;&amp; python setup.py clean\n</code></pre></p>  Developing PyTorch \u8be6\u7ec6\u4ecb\u7ecd   &gt; \u622a\u53d6\u81eapytorch\u5f00\u53d1\u6307\u5bfc  &gt; \u539f\u6587\u94fe\u63a5\u5730\u5740\uff1a https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md#developing-pytorch   ## Developing PyTorch Follow the instructions for [installing PyTorch from source](https://github.com/pytorch/pytorch#from-source). If you get stuck when developing PyTorch on your machine, check out the [tips and debugging](#tips-and-debugging) section below for common solutions.  ### Tips and Debugging  * If you want to have no-op incremental rebuilds (which are fast), see [Make no-op build fast](#make-no-op-build-fast) below.  * When installing with `python setup.py develop` (in contrast to `python setup.py install`) you will symlink    the Python files from the current local source-tree into the Python install.   This way you do not need to repeatedly install after modifying Python files (`.py`).   However, you would need to reinstall if you modify Python interface (`.pyi`, `.pyi.in`) or    non-Python files (`.cpp`, `.cc`, `.cu`, `.h`, ...).    To reinstall, first uninstall all existing PyTorch installs. You may need to run `pip   uninstall torch` multiple times. You'll know `torch` is fully   uninstalled when you see `WARNING: Skipping torch as it is not   installed`. (You should only have to `pip uninstall` a few times, but   you can always `uninstall` with `timeout` or in a loop if you're feeling   lazy.)    <pre><code>conda uninstall pytorch -y\nyes | pip uninstall torch\n</code></pre>    Next run `python setup.py clean`. After that, you can install in `develop` mode again.  * If a commit is simple and doesn't affect any code (keep in mind that some docstrings contain code   that is used in tests), you can add `[skip ci]` (case sensitive) somewhere in your commit message to   [skip all build / test steps](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/).   Note that changing the pull request body or title on GitHub itself has no effect.  * If you run into errors when running `python setup.py develop`, here are some debugging steps:   1. Run `printf '#include \\nint main() { printf(\"Hello World\");}'|clang -x c -; ./a.out` to make sure   your CMake works and can compile this simple Hello World program without errors.   2. Nuke your `build` directory. The `setup.py` script compiles binaries into the `build` folder and caches many   details along the way, which saves time the next time you build. If you're running into issues, you can always   `rm -rf build` from the toplevel `pytorch` directory and start over.   3. If you have made edits to the PyTorch repo, commit any change you'd like to keep and clean the repo with the   following commands (note that clean _really_ removes all untracked files and changes.):       <pre><code>git submodule deinit -f .\ngit clean -xdf\npython setup.py clean\ngit submodule update --init --recursive # very important to sync the submodules\npython setup.py develop                 # then try running the command again\n</code></pre>   4. The main step within `python setup.py develop` is running `make` from the `build` directory. If you want to     experiment with some environment variables, you can pass them into the command:       <pre><code>ENV_KEY1=ENV_VAL1[, ENV_KEY2=ENV_VAL2]* python setup.py develop\n</code></pre>  * If you run into issue running `git submodule update --init --recursive`. Please try the following:   - If you encounter an error such as     <pre><code>error: Submodule 'third_party/pybind11' could not be updated\n</code></pre>     check whether your Git local or global config file contains any `submodule.*` settings. If yes, remove them and try again.     (please reference [this doc](https://git-scm.com/docs/git-config#Documentation/git-config.txt-submoduleltnamegturl) for more info).    - If you encounter an error such as     <pre><code>fatal: unable to access 'https://github.com/pybind11/pybind11.git': could not load PEM client certificate ...\n</code></pre>     this is likely that you are using HTTP proxying and the certificate expired. To check if the certificate is valid, run     `git config --global --list` and search for config like `http.proxysslcert=`. Then check certificate valid date by running     <pre><code>openssl x509 -noout -in &lt;cert_file&gt; -dates\n</code></pre>    - If you encounter an error that some third_party modules are not checked out correctly, such as     <pre><code>Could not find .../pytorch/third_party/pybind11/CMakeLists.txt\n</code></pre>     remove any `submodule.*` settings in your local git config (`.git/config` of your pytorch repo) and try again. * If you're a Windows contributor, please check out [Best Practices](https://github.com/pytorch/pytorch/wiki/Best-Practices-to-Edit-and-Compile-Pytorch-Source-Code-On-Windows). * For help with any part of the contributing process, please don\u2019t hesitate to utilize our Zoom office hours! See details [here](https://github.com/pytorch/pytorch/wiki/Dev-Infra-Office-Hours)"},{"location":"PyTorch/Ox01/#gdb-demo","title":"gdb demo","text":"test.py  <pre><code># aten/src/ATen/native/Scalar.cpp \nimport torch x = torch.tensor([1]).cuda() y = x.item() </code></pre>  demo  <pre><code>(pytorch_learn) fengwen@oneflow-25:/data/dataset/fengwen/pytorch/.fengwen$ gdb --args python test.py GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from python...\n(gdb) b aten/src/ATen/native/Scalar.cpp:19\nNo source file named aten/src/ATen/native/Scalar.cpp.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (aten/src/ATen/native/Scalar.cpp:19) pending.\n(gdb) r\nStarting program: /data/home/fengwen/miniconda3/envs/pytorch_learn/bin/python test.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n[Detaching after fork from child process 468387]\n....\nThread 1 \"python\" hit Breakpoint 1, at::native::item (self=...)\nat /data/dataset/fengwen/pytorch/aten/src/ATen/native/Scalar.cpp:19\nwarning: Source file is more recent than executable.\n19        auto numel = self.sym_numel();\n(gdb) l\n14      namespace at {\n15      namespace native {\n16        17\n18      Scalar item(const Tensor&amp; self) {\n19        auto numel = self.sym_numel();\n20        TORCH_CHECK(numel == 1, \"a Tensor with \", numel, \" elements cannot be converted to Scalar\");\n21        if (self.is_sparse()) {\n22          if (self._nnz() == 0) return Scalar(0);\n23          if (self.is_coalesced()) return at::_local_scalar_dense(self._values());\n</code></pre>"},{"location":"utils/Python/","title":"VS Code \u63d2\u4ef6::Python","text":""},{"location":"utils/Python/#python","title":"Python","text":"<p>vscode \u63d2\u4ef6</p> <p></p> <p>\u5b98\u65b9\u94fe\u63a5: https://www.python.org/</p> <p>\u4f7f\u7528\u4ecb\u7ecd: \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22  Python   \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u5b89\u88c5\u4e4b\u540e\uff0c\u6253\u5f00\u4e00\u4e2a\u65b0\u7684.py\u6587\u4ef6\u5373\u53ef\u4f7f\u7528\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879: </p> <ol> <li> <p>\u5207\u6362 Python \u89e3\u91ca\u5668\uff1a  Crtl+Shift + P \u641c\u7d22  <code>Python:select Interpreter</code>   \u914d\u7f6e\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002 \u4ee5\u540e\u6bcf\u6b21\u6253\u5f00VsCode\uff0c\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u89e3\u91ca\u5668\u3002good\uff01 </p> </li> <li> <p>VScode\u5e95\u90e8\u72b6\u6001\u680f\u4e0d\u89c1\uff0c \u8bf7\u5982\u4e0b\u56fe\u52fe\u9009  Status Bar</p> </li> </ol> <p></p>"},{"location":"utils/clangd/","title":"VS Code \u63d2\u4ef6::clangd","text":""},{"location":"utils/clangd/#clangd","title":"clangd","text":"<p>\u5b98\u65b9\u94fe\u63a5: https://github.com/clangd/clangd</p> <p>\u4f7f\u7528\u4ecb\u7ecd:   \u914d\u7f6e clangd \u6559\u7a0b </p> <p>\u6ce8\u610f\u4e8b\u9879: ~</p>"},{"location":"utils/gdb/","title":"Debug\u5de5\u5177::GDB","text":""},{"location":"utils/gdb/#gdb","title":"GDB","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd OneFlow \u4e2d\u4f7f\u7528 gdb  debug</p> <p>Cmake \u65f6\u5019\u4f7f\u7528 -DCMAKE_BUILD_TYPE=Debug </p>  oneflow Debug \u65b9\u5f0f\u7f16\u8bd1\u793a\u4f8b <pre><code>git clone git@github.com:Oneflow-Inc/oneflow.git &amp;&amp; cd oneflow mkdir -p build &amp;&amp; cd build\n\ncmake .. -C ../cmake/caches/cn/cuda.cmake   -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda  \\\n-DCUDNN_ROOT_DIR=/usr/local/cudnn -DCMAKE_GENERATOR=Ninja -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_EXPORT_COMPILE_COMMANDS=1\nninja -j32\n</code></pre>"},{"location":"utils/live_server/","title":"VS Code \u63d2\u4ef6::Live Server","text":""},{"location":"utils/live_server/#live-server","title":"Live Server","text":"<p>\u5b98\u65b9\u94fe\u63a5\uff1ahttps://github.com/ritwickdey/vscode-live-server-plus-plus</p> <p>\u4f7f\u7528\u4ecb\u7ecd: \u548c\u4e00\u822c\u7684 VS Code\u63d2\u4ef6\u4e00\u6837\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u4fa7\u8fb9\u6d3b\u52a8\u680f\u7684\u63d2\u4ef6\u5e02\u573a\u56fe\u6807\uff0c\u641c\u7d22  Live Server   \u8fdb\u884c\u5b89\u88c5\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a </p> <p>\u6253\u5f00\u4e00\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u5355\u51fb\u72b6\u6001\u680f\u4e2d\u7684    GO Live  \u4ee5\u6253\u5f00/\u5173\u95ed\u670d\u52a1\u3002</p> <p></p> <p>\u5982\u679cVScode\u5e95\u90e8\u72b6\u6001\u680f\u4e0d\u89c1\uff0c \u8bf7\u5982\u4e0b\u56fe\u52fe\u9009  Status Bar</p> <p></p>"},{"location":"utils/nsys/","title":"\u6027\u80fd\u5de5\u5177::nsys","text":""},{"location":"utils/nsys/#nvtxnsys","title":"\u7ed3\u5408NVTX\u6ce8\u91ca\u4e0a\u624bnsys","text":"<p>NVTX\u662f\u4e00\u79cd\u5de5\u5177\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u81ea\u5b9a\u4e49\u6807\u8bb0\u6ce8\u91ca\u5176\u4ee3\u7801\uff0c\u8fd9\u4e9b\u6807\u8bb0\u53ef\u4ee5\u5728\u50cfNVIDIA Nsight Systems\uff08nsys\uff09\u8fd9\u6837\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\u4e2d\u53ef\u89c6\u5316\u3002\u8fd9\u4e9b\u6807\u8bb0\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u4e86\u89e3\u5176\u4ee3\u7801\u7684\u6027\u80fd\u7279\u5f81\uff0c\u5e76\u786e\u5b9a\u4f18\u5316\u7684\u9886\u57df\u3002</p> <ul> <li> <p>nvtx \u6559\u7a0b: https://nvtx.readthedocs.io/en/latest/index.html</p> </li> <li> <p>#1054 OneFlow Eager Profile\u5957\u8def\u4ea4\u6d41\u8d34</p> </li> </ul>"},{"location":"utils/nsys/#python-demo","title":"Python Demo","text":"<p><pre><code>import numpy as np\nimport cupy as cp\nimport nvtx\n@nvtx.annotate(\"fft function\", color=\"blue\")\ndef fast_fft(input_array):\nwith nvtx.annotate(\"Copy input array to GPU and CuPy\", color=\"red\"):\ngpu_array = cp.array(input_array)\nwith nvtx.annotate(\"GPU FFT operation\", color=\"yellow\"):\nresult = cp.fft.fft(gpu_array)\nwith nvtx.annotate(\"Copy back to CPU and Numpy\", color=\"green\"):\ncpu_result = cp.asnumpy(result)\nreturn cpu_result\nfor i in range(5):\nprint(fast_fft(np.random.random(10)))\n</code></pre> \u542f\u52a8\u6307\u4ee4:  <pre><code>nsys profile python3 demo.py\n</code></pre> \u4e0a\u56fe\u5bf9\u5e94\u7684 nsys\u6587\u4ef6 report1.zip</p>"},{"location":"utils/nsys/#c-demo","title":"C++ Demo","text":"<pre><code>#include &lt;cuda_runtime.h&gt;\n#include \"nvToolsExt.h\"\n#include &lt;iostream&gt;\n// \u5b9a\u4e49\u5411\u91cf\u52a0\u6cd5\u7684 CUDA \u6838\u51fd\u6570\n__global__ void vectorAdd(const float *A, float *C, int N) {\nint i = blockDim.x * blockIdx.x + threadIdx.x;\nif(i &lt; N) {\nC[i] = A[i] + 1.0f;\n}\n}\n// \u542f\u52a8 CUDA \u6838\u51fd\u6570\nvoid launch_kernel(const float *A, float *C, int N) {\nnvtxRangePushA(\"_FUNCTION_\"); // \u5f00\u59cb\u8bb0\u5f55 _FUNCTION_ \u7684\u65f6\u95f4\u6233\nint threadsPerBlock = 256;\nint blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;\nfor(int i = 0; i &lt; 4; i++) {\nnvtxRangePushA(\"vectorAdd\"); // \u5f00\u59cb\u8bb0\u5f55 vectorAdd \u7684\u65f6\u95f4\u6233\nvectorAdd&lt;&lt;&lt;blocksPerGrid, threadsPerBlock&gt;&gt;&gt;(A, C, N);\nnvtxRangePop(); // \u7ed3\u675f\u8bb0\u5f55 vectorAdd \u7684\u65f6\u95f4\u6233\n}\nnvtxRangePop(); // \u7ed3\u675f\u8bb0\u5f55 _FUNCTION_ \u7684\u65f6\u95f4\u6233\n}\nint main() {\nconst int N = 100;\nfloat *A, *C;\ncudaMallocManaged(&amp;A, N * sizeof(float));\ncudaMallocManaged(&amp;C, N * sizeof(float));\nfor(int i = 0; i &lt; N; i++) {\nA[i] = static_cast&lt;float&gt;(i);\nC[i] = 0.0f;\n}\nstd::cout &lt;&lt; \"Launching kernel...\" &lt;&lt; std::endl;\nlaunch_kernel(A, C, N);\ncudaFree(A);\ncudaFree(C);\nreturn 0;\n}\n// \u5b8c\u6210\u7a0b\u5e8f\n</code></pre>"},{"location":"utils/nsys/#reference","title":"Reference","text":"<ul> <li>NVIDIA\u6027\u80fd\u5206\u6790\u5de5\u5177Nsight Systems/Compute \u7684\u4f7f\u7528\u4ecb\u7ecd</li> <li>#1054 OneFlow Eager Profile\u5957\u8def\u4ea4\u6d41\u8d34</li> </ul>"},{"location":"utils/pdb/","title":"Debug\u5de5\u5177::pdb","text":""},{"location":"utils/pdb/#pdb","title":"pdb","text":"<p>pdb --- Python \u7684\u8c03\u8bd5\u5668\u00b6 </p> <p>\u5b98\u65b9\u94fe\u63a5\uff1ahttps://docs.python.org/zh-cn/3/library/pdb.html</p> <p>\u4f7f\u7528\u4ecb\u7ecd: https://docs.python.org/zh-cn/3/library/pdb.html</p> <p>\u6ce8\u610f\u4e8b\u9879: ~ </p>"},{"location":"utils/vscode/","title":"Visual Studio Code","text":""},{"location":"utils/vscode/#visual-studio-code","title":"Visual Studio Code","text":"<p>\u5b98\u65b9\u94fe\u63a5:  https://code.visualstudio.com/</p> <p>\u4f7f\u7528\u4ecb\u7ecd:  Visual Studio Code \uff08\u7b80\u79f0VS Code\uff09\u662f\u4e00\u6b3e\u7531\u5fae\u8f6f\u5f00\u53d1\u4e14\u8de8\u5e73\u53f0\u7684\u514d\u8d39\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c~</p> <p>\u6ce8\u610f\u4e8b\u9879: ~</p>"}]}